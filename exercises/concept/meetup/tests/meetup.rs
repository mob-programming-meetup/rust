//! Tests for meetup 
//! 
//! Generated by [utility][utility]
//! 
//! [utility]: https://github.com/exercism/rust/tree/main/util/exercise

use meetup::*;

/**
   This issue describes how to implement the string-use concept exercise for the Rust track.


   - Create a list of meetup participants
   - Create struct Person with name, city
   - Play around with a string and combine strings
   - Roman numeral conversion to Arabic numbers


Goal

The goal of this exercise is to teach the student how to work with Strings in Rust. This is part of a few concept exercises introducing the student to Rust's 2 string types.
Learning objectives


    Know of the existence of type String.
    Know of basic functions that work on String. => len, chars, ... 
    Strings are owned and thus can be mutable
    how print String's using format! and basic formatting

Out of scope

    the difference between String and &str
    performance characteristics (heap allocations, etc)

Concepts

    strings-use

Prerequisites

    intro-fn
    
    intro-types

Resources to refer to
Hints

    stdlib String
    "Rust by Example" String
    std::fmt

Links

    https://doc.rust-lang.org/book/ch08-02-strings.html#storing-utf-8-encoded-text-with-strings
    https://fasterthanli.me/blog/2020/working-with-strings-in-rust/

Representer

Does not require changes to the Representer.
Analyzer

Does not require an Analyzer. 
**/

#[test]
fn test() {
    assert_eq!(roman_to_arabic(String::from("I")), 1);
}

#[test]
fn test_digit() {
    assert_eq!(roman_to_arabic_digit('I'), 1);
}

#[test]
fn test_with_v() {
    assert_eq!(roman_to_arabic(String::from("V")), 5);
}

#[test]
fn test_with_ii() {
    assert_eq!(roman_to_arabic(String::from("II")), 2);
}

#[test]
fn test_with_x() {
    assert_eq!(roman_to_arabic_digit('X'), 10);
}

#[test]
fn test_with_xv() {
    assert_eq!(roman_to_arabic(String::from("XV")), 15);
}

#[test]
fn test_with_iv() {
    assert_eq!(roman_to_arabic(String::from("IV")), 4);
}

#[test]
fn test_with_ix() {
    assert_eq!(roman_to_arabic(String::from("IX")), 9);
}